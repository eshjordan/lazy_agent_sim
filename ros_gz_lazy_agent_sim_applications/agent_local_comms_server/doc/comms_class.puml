@startuml

abstract class BaseKnowledgeServer {
  + BaseKnowledgeServer(std::shared_ptr<BaseRobotCommsModel> robot_model)
  + {abstract} void start()
  + {abstract} void stop()
  # std::shared_ptr<BaseRobotCommsModel> robot_model
}

abstract class BaseKnowledgeClient {
  + BaseKnowledgeClient(\n\tEpuckNeighbourPacket neighbour,\n\tstd::function<bool()> running,\n\tstd::shared_ptr<BaseRobotCommsModel> robot_model)
  + {abstract} void start()
  + {abstract} void stop()
  # EpuckNeighbourPacket neighbour
  # std::function<bool()> running
  # std::shared_ptr<BaseRobotCommsModel> robot_model
}

abstract class BaseRobotCommsModel {
  + uint8_t ROBOT_ID
  + std::string MANAGER_HOST
  + uint16_t MANAGER_PORT
  + std::string ROBOT_HOST
  + uint16_t ROBOT_PORT
  # std::set<uint8_t> known_ids

  + BaseRobotCommsModel(...)
  + {abstract} void start()
  + {abstract} void stop()
  + std::vector<uint8_t> get_known_ids()
  + size_t insert_known_ids(std::vector<uint8_t> ids)
}


struct EpuckHeartbeatPacket {
  {static} uint8_t ID
  uint8_t robot_id
  std::array<char, MAX_HOST_LEN + 1> robot_host
  uint16_t robot_port
}

struct EpuckNeighbourPacket {
  {static} uint8_t ID
  uint8_t robot_id
  std::array<char, MAX_HOST_LEN + 1> host
  uint16_t port
  float distance
}

struct EpuckHeartbeatResponsePacket {
  {static} uint8_t ID
  uint8_t num_neighbours
  std::array<EpuckNeighbourPacket, MAX_ROBOTS> neighbours
}

struct EpuckKnowledgePacket {
  {static} uint8_t ID
  uint8_t robot_id
  uint8_t N
  std::array<uint8_t, MAX_ROBOTS> known_ids
}


class RobotCommsModel <T : BaseKnowledgeServer\nU : BaseKnowledgeClient> {
  + RobotCommsModel<T, U>(...)
  + void start()
  + void stop()
  - void launch_exchange_heartbeats()
  - void exchange_heartbeats()
  - asio::io_context io_context_
  - std::shared_ptr<T> knowledge_server_
  - std::map<uint8_t, U> knowledge_clients_
  - bool run_heartbeats_
  - std::thread heartbeat_thread_
  - {static} char* TAG
}


class UDPKnowledgeServer <T : BaseRobotCommsModel> {
  + UDPKnowledgeServer(std::shared_ptr<T> robot_model)
  + void start()
  + void stop()
  - void launch_start_receive()
  - void start_receive()
  - void handle_receive(asio::ip::udp::endpoint client,\n\t std::array<uint8_t, sizeof(EpuckKnowledgePacket)> data)
  - asio::io_context io_context_
  - asio::ip::udp::socket *socket_
  - std::thread heartbeat_thread_
  - bool running_
  - {static} char* TAG
}

class UDPKnowledgeClient <T : BaseRobotCommsModel> {
  + UDPKnowledgeClient(\n\tEpuckNeighbourPacket neighbour,\n\tstd::function<bool()> running,\n\tstd::shared_ptr<T> robot_model)
  + void start()
  + void stop()
  - void launch_send_knowledge()
  - void send_knowledge()
  - asio::io_context io_context_
  - asio::ip::udp::socket *client_
  - std::thread thread_
  - bool stopping_
  - {static} char* TAG
}


class GZKnowledgeServer <T : BaseRobotCommsModel> {
  + GZKnowledgeServer(std::shared_ptr<T> robot_model)
  + void start()
  + void stop()
  - void on_knowledge(const gz_msgs::Dataframe &msg)
  - gz_transport::Node node
  - gz_transport::Publisher pub_knowledge
  - bool running_
  - {static} char* TAG
}

class GZKnowledgeClient <T : BaseRobotCommsModel> {
  + GZKnowledgeClient(\n\tEpuckNeighbourPacket neighbour,\n\tstd::function<bool()> running,\n\tstd::shared_ptr<T> robot_model)
  + void start()
  + void stop()
  - void send_knowledge()
  - gz_transport::Node node
  - gz_transport::Publisher pub_knowledge
  - std::thread thread_
  - {static} char* TAG
}


BaseRobotCommsModel <|-- RobotCommsModel
BaseKnowledgeServer <|-- UDPKnowledgeServer
BaseKnowledgeClient <|-- UDPKnowledgeClient
BaseKnowledgeServer <|-- GZKnowledgeServer
BaseKnowledgeClient <|-- GZKnowledgeClient

RobotCommsModel <|-[hidden]- BaseKnowledgeServer
RobotCommsModel <|-[hidden]- BaseKnowledgeClient

BaseRobotCommsModel -[hidden]left-> EpuckHeartbeatPacket
RobotCommsModel -[hidden]left-> EpuckHeartbeatResponsePacket
BaseRobotCommsModel -[hidden]right-> EpuckNeighbourPacket
RobotCommsModel -[hidden]right-> EpuckKnowledgePacket

@enduml
